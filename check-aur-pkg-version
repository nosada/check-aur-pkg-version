#!/bin/env python

"""
Compare version of AUR package, which are maintained by given maintainer,
with upstream on GitHub

Usage:
    check_aur_pkg_version [MAINTAINER] [--slack-webhook-url SLACK_WEBHOOK_URL]
    check_aur_pkg_version [-c CONFIG]

Arguments:
    MAINTAINER                         AUR package maintainer

Options:
    --slack-webhook-url SLACK_WEBHOOK_URL    Slack incoming webhook URL
                                             to post message of comparation
                                             result
    -c CONFIG                                Specify config instead of passing
                                             maintainer and webhook URL
                                             directly

Notes:
    MAINTAINER and SLACK_WEBHOOK_URL can be passed as environment variables.
"""

from urllib.parse import quote
import errno
import os
import re
import sys

from docopt import docopt
import requests
import slackweb
import yaml


class MaintainedAURPackages():
    def __init__(self, maintainer):
        self.aur_endpoint = "https://aur.archlinux.org"
        self.maintainer = maintainer

        self.out_of_date_packages = {}

    def _get_maintained_packages(self):
        rpc_query = "/rpc/?v=5&type=search&by=maintainer&arg={m}".format(
            m=self.maintainer)
        response = requests.get(self.aur_endpoint + rpc_query).json()

        packages = response["results"]
        return packages

    def _get_upstream_url(self, package_name):
        rpc_query = "/rpc/?v=5&type=info&arg[]={p}".format(p=quote(package_name))
        response = requests.get(self.aur_endpoint + rpc_query).json()

        info = response["results"][0]
        if info["URL"]:
            upstream = info["URL"]
        else:
            upstream = None
        return upstream

    def _get_latest_upstream_version(self, package_name):
        url = self._get_upstream_url(package_name)
        version = None

        if url:
            # In case upstream is hosted in GitHub
            github_patterns = [
                r"^.*http[s]://github.com/([-_a-zA-Z0-9]*)/([-_a-zA-Z0-9]*)/*",
                r"^http[s]?://([-_a-zA-Z0-9]*).github.io/([-_a-zA-Z0-9]*)/*"
            ]
            for pattern in github_patterns:
                matched = re.match(pattern, url)
                if matched:
                    author, repo_name = matched.groups()
                    version = self._get_version_from_github(author, repo_name)

        if version:
            version_with_prefix = re.match(r"^v(er)?(\\.)?([.0-9]*)",
                                           version)
            if version_with_prefix:
                version = version_with_prefix.groups()[-1]
        return version

    @staticmethod
    def _get_version_from_github(author, repo_name):
        def _get(url):
            return requests.get(url).json()

        version = None

        repo_url = "https://api.github.com/repos/{a}/{r}".format(
            a=author, r=repo_name)
        release_url = repo_url + "/releases/latest"

        response = _get(release_url)
        if "tag_name" in reponse:
            version = response["tag_name"]
        else:
            if response.get("message") == "Not Found":
                tags_url = repo_url + "/tags"
                response = _get(tags_url)
                if isinstance(response, list) and response:
                    version = response[0]["name"]

        return version

    @staticmethod
    def _is_latest_version(aur_pkg_version, upstream_version):
        """
        Comparation function. Current impletementation is too naive:
            AUR: 1.0.0, Upstream: 1.0.0 -> latest
            AUR: 1.0.0, Upstream: 1.0.1 -> NOT latest
            AUR: 1.1.0, Upstream: 1.0.1 -> NOT latest (maybe not occured)
        """

        comparable_aur_pkg_version = aur_pkg_version.split("-")[0]
        return comparable_aur_pkg_version in upstream_version

    def get_out_of_date_packages(self):
        packages = self._get_maintained_packages()
        for package in packages:
            package_version = package["Version"]
            package_name = package["Name"]

            upstream_version = self._get_latest_upstream_version(package_name)

            if upstream_version:
                if self._is_latest_version(package_version, upstream_version):
                    message = "{p} is up-to-date: {v}".format(
                        p=package_name, v=package_version
                    )
                else:
                    message = ("Version {u} is released in upstream of {p} "
                               "(current: {v})").format(p=package_name,
                                                        v=package_version,
                                                        u=upstream_version)
                    self.out_of_date_packages[package_name] = {
                        "upstream": upstream_version,
                        "package": package_version
                    }
            else:
                message = "Failed to get upstream version for {p}".format(
                    p=package_name
                )
            print(message)
        return self.out_of_date_packages.items()


class Report():
    def __init__(self, slack_webhook_url):
        self.slack = slackweb.Slack(url=slack_webhook_url)

    def post_package_version_warning_to_slack(self, pkg_name, pkg_version,
                                              upstream_version):
        attachments = []
        attachment = {
            "pretext": "Upstream version seems to be updated.",
            "color": "warning",
            "fields": [
                {
                    "title": "Package Name",
                    "value": pkg_name,
                    "short": False
                },
                {
                    "title": "Package Version in AUR",
                    "value": pkg_version,
                    "short": True
                },
                {
                    "title": "Upstream Version",
                    "value": upstream_version,
                    "short": True
                },
            ]
        }
        attachments.append(attachment)
        self.slack.notify(attachments=attachments,
                          username="AUR package version checker",
                          icon_emoji=":mag:")


if __name__ == "__main__":
    ARGS = docopt(__doc__)
    MAINTAINER = ARGS["MAINTAINER"]
    SLACK_WEBHOOK_URL = ARGS["--slack-webhook-url"]

    CONFIG = ARGS["-c"]
    if CONFIG:
        print("Using maintainer and Slack webhook URL in config")
        with open(CONFIG) as file_obj:
            CONFIG_OBJ = yaml.load(file_obj, Loader=yaml.SafeLoader)
            MAINTAINER = CONFIG_OBJ["maintainer"]
            SLACK_WEBHOOK_URL = CONFIG_OBJ["slack_webhook_url"]

    if "MAINTAINER" in os.environ:
        print("Using maintainer in enviromnet variable 'MAINTAINNER'")
        MAINTAINER = os.environ["MAINTAINER"]

    if "SLACK_WEBHOOK_URL" in os.environ:
        print(
            ("Using Slack webhook URL in enviromnet variable "
             "'SLACK_WEBHOOK_URL'")
        )
        SLACK_WEBHOOK_URL = os.environ["SLACK_WEBHOOK_URL"]

    if not (MAINTAINER and SLACK_WEBHOOK_URL):
        if not MAINTAINER:
            sys.stderr.write(
                "Required `MAINTAINER` not set. see help message in detail\n"
            )
        if not SLACK_WEBHOOK_URL:
            sys.stderr.write(
                ("Required `SLACK_WEBHOOK_URL` not set. "
                 "see help message in detail\n")
            )
        sys.exit(errno.ENOENT)

    AUR = MaintainedAURPackages(maintainer=MAINTAINER)
    REPORT = Report(SLACK_WEBHOOK_URL)

    for pkg_name, versions in AUR.get_out_of_date_packages():
        upstream_version = versions["upstream"]
        pkg_version = versions["package"]
        REPORT.post_package_version_warning_to_slack(pkg_name, pkg_version,
                                                     upstream_version)
